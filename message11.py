#text = "nnsnntntsqtkqqqqntnkqqnssqnksqksqnqqkqnssstttqqqnqtnqqqtnqqqkkstksqqqnsnqqsnqnnnnssqqnssnqnsqsnqsktqnsqtkqtqqsqskqkttskssqstqqqnqkqqqknssntqkqqntktsqsnksskntsnknsqtksqtsnstkknksqtstskssssktqtqkkkkktqnqtsskkqnqnsqnnqnnqsqqnqksqsqstnqsstsstqqsqnnqnssqtntsnkqnsqkksqsnkkkqqssskkqtkstnnqqkstqqkssqnkqqsqnqttqqstttkqqqqtnskqkssnqqtqqtnqsstsktnqtqknqqnnstssnqknqsstkksqnqskstsksksntqskstqknnqqqnqnsntqqqqqksqkkkksqnqqtnsnqqqtstqnnnkqnntnqtqqsskknskntsntqsnstsnnnqnkstqqnktqtnqqtkqqqttqqssqsnknsqqnqqnskskkskqssqttsqsnqqnkssqqtqkkkkqtksnnqtqqqsqkksnqqttsqnsnqntsskknqqqnkksksnnsqqnnqnkstkqsstkssttqqnnkqnknsqnqnsnqqsstssqqqqqnqsnsqqqstsqqntstqqqqkqstqqknknqqqnqsnqkkqqnstnsqqtsqtnkqssnqnnkqqtssqnttqqqktkqssksskqqnnksqkqqnkksqkssqkkknsnstsqkqnkkqqnsnsqqnkkqqskqtnqsnqqqsnqqqnkkqqkqqqqqnnnqnssqnttnsqsntstkknqsqqqkssqtqqstknqtnttnsntqkknnqnnsqsqntnqqtkqqnkqtqqssknkqtsqtknqsqqnsqtknqsttnqnssnknknktnsqsqqqnqksqqtnknkktsnsnskstqkqnkqqsktsqqkqkqsnskknqqtqstnsktnstkqnttktskqnttqntksqsnnksqqttqqsqsnqqkksqnqqkqsskqqssqktsqnsqsttqqnssnnsnskssnnqnqqsnnssntktttnqqstnqsqqsskqtnqqqqnqqnstntqnststqnsktsqkskksqqsknqtntksnnssqnqqssttqsttnnssssqtnntqqntqqssqqknkttkkktnkssqnnknnkqnttntsnkskqnnqqstktttksnnqqssssqqkqnstqstssqqnssqssnnkskqqnkqqsqsqsnsqqqktknktktqtkqnqnsqsntttsksqnqtqstssqssknqnnsqssnsqqsstsqnsqnqqkqqqqqnqtsnkknktksqsssqsnqqqsqqqsstsnqnsqssqqnktstnttkqkksnkqqktkqqqqqnsqstkqtqnnkkkqnsssqtqnqnqqsqqnttqsntsqqknqnqqqqkstqnnsqqnsktsnqtqtssqtsktqnstsqkstqtqskqtsqsssssqqsskskqttnqnnsntqnktnsnqnnqqsqsktqksqsnqqsktsksnnqntktnntqsstqqnkstsknnkstkknqqkqqsqqkkskqqsqnssqsqnqtkqqqtqtsqtsqqqstkqtsksstnkqqsnqtkqttqqqnttqqstkqqtknqknqqkqtsnsnsttktqsqssnsqqsqnkknqqqqnnqtqsstkstqqssskknsnkqsnksnskqqsssktsqttkqntqqqsqnkqnsqkstqtkqqsssqtsksqnssnkstsqqqkkskqsttqsnskqtqqsknkqnsssqssqqnktktsknsktttsnqqsqsksqttkskqntttqnqqtqsqsqkqntktknqkqsqqnskqsqqkqqqsnqqtqqqsnqqtnqsnqsnksskqnnnkqstkksqttqsnqkqtnnnqsssnqqsqsqnqqnqtqqqqqqqqsnqnnnsqqqsqqksktsqqqnntsnqnnqsqqsnkkskqnsqsnkqtkstnnqqqkqqtskqtqkntsknsqntqstskqksqqqqnnsqtqskqknkssskqqknqqnstsktssqsnsqqnktknktsnqsqqsstnstnnsskqnntqqkqnkkksnqkqqtqqtqqntsntkkkttqtqnqsqssttktttntqqsqnqqqqkqtqqktnqqstqkknkqtktqsnqsqknkknsqsnsnnqssqqkstqssnsnnqkktqnqqstnqqqsnstnnkqttkqnttqqkqqstqqqstqkqtktqnnqqsqsqqqqtqksqqsksnkkqstqqttsqsqqtnsnnqknnqnktqssqnqttstqnsqkststqtqsqnkksttkntqknkskqqkqtsstskqsnskqknqqqkqtskksqqsqssnqssqnnkkskkqnqkstskqkkqnqqskqsntssnsskqqknqqsskqnqknksnskkqssqnqnknkksqkqtkksq"
#text = "FFGDFXDXGGFGDDAFDGXDXXDAXAXGDDGFXXDXXXFXXFXDGFDFAFDGGDXXFGXFDGGGGXXDDFXDFFGGFGXDDFXXXFXFFFXDXXDXDFXXGXGFXXXXDXDDGDGXFGDXGGFXFGXXXXFDDFDXXFDDDDDXDGGDFXXXFXAAFXGGXGGGDFFXDFFFDDXFFDDDFFAXDXFDGDDFXFDGXFDXGXDXGFDFGDGFXXDGGDXGXDDDDGDXDGXFDXXAXXXFFDDDXDXDDFGXDDFFFXDXXFFXXAXFFGDXXXDDDGGFFGFFGGDFXFFDGDFDGXXGFDXDFFXDFDDDFGDDFDDFFXGGXFDXFGGDADDDDXDDGGDXDFXFFXXXXDFGFFFDXDXDXXXDXDXDXGXFFFXXXDGDDDDDDDDDXGFDDDGGDDXAFFXFFFGXAGDXDXFFFXAXXXXGDFDXDGXFXFADXXDGXDXDFFAGDDDXXFADFDDGFFXFFDDDDXXFDDDXXFFXFGAFDXAGDFDDXXDGFDDFDXXDGFXGDAFXXDFXXXXDFFGGXDDFFFDDFFXAGXXDGXFFDDAXDDDFFFXXGXFDGFDDFXDFFGXFXGGDDDFGDFFGGDXXGDXXXDDXXDXGXXXDDXXXAGDDDXGXFGXFFGDDDDXGDXXAGFGXXDDFGXGXGDGDDDFFFGFXDXFXDXGFXFGDGGDXDGDFGFDFDDDXFDXGXXDDXXFFXGDFXDDDGXGGDFXFAXFFXGDGXXGDFXGDFDDFXXGXDGXFDXXAAGDFXFFDDXDXXDFDXFGFFXDDFDDXXDGXXGGXXDDXFDGDFFDDFXXFDFAFDXXXXAXXXXXXGXDDXDXXXDGAXXXGXFXDDDGGXXDXFXGDFFXXFFGGXGFDGFXGXXFDFXFDXXDXFDFXDGGFXXFXGGGXXXDXFDDXGXAXGGFDADFFXGDXXFDDDFDGDDFXDXXGGFFFFGADDDDFXDGXGAXDGFDDXDDGXXXFGFXGGFXDGXXADAFFFXDDAGXFXXDGXGFXFDDFDADXDGGDDXXDXAXDXFXGXFDFAFAADXXXXFGXFFGXAGDGDGXXXDFFDDXDGDDAXDDDDXXXGDDFDFDXADDXGXDFFXFXXGGDFDDGXGFDFDDXDGDXDGDGXDAFXGDFGGDXGFDGXDXXFADDDADDFGAFDXFXFFFGXDFXGFGXDFDXGXXDGXFGXXFXXDGXGXDDGAXFFGADFXGXFDXDDFDDXXFGXFADGGXGFFDDXGXDXFXFGXXFFXFXGFFGXXADFGXXDDDDAXGXXXFFGGXXAGDGXGXXGFGGDGDFGGDDFXFGXDGGXDDFDXXGXGXFFDXXXDDGGXXXXFDDFGDDXXFDXGFXXDFGADXFXDDXGXXFGXXXGGGDDGGGGDFGGXDXXDFXXGDXXXFFFFDDDDGDAFXGFFFFXGDAGDDXGXDGGDDXDXGXFDFDFFDGDDXDFDDXAXGDFAFFGDFAGXDFGXXGXXXAGXFFDFFXXDFGXDXAFGDDFFXDFFXDGDFGXFXFGGDXGAXDXGFDADXADFFGDFGDXFDGFFAGDFGFDXDXGXFFGXDFDFFXGFXFXXXDXDAGDDFGGGGDXXGFFGXXFXXFFDFDXFDGDGDXDFFGDXDDDFXFXXFGGDAXFDFXXFADGXDGGGFGXGDXDXFXXFXDXDADXFFDDGDDDXFGGDXXFFXFXDXXXGDXXFAGGXDFXFGGXFDFDGGXDDXFFFFFXADXFDFGXFGFGDFAXAXXFXFDGGAAFFGGXXDGFFDXXDFDDXXXXDGFFXXDFXXGFXGGFXFDGXXXXGGFDXFXDDFDXFFDGGAXXDDXDXDFFDDXGDGGGXXXXXXDDDDDFFDGAAXGXFDXXFDGXDDFFXXGXGXDFDXADDDDDDGXXXFDGGDDDGFXFXDGFGDFXXAGXXGXGFXDDDDDFXFXXXFXGAAGXXXXDFXGFXDDDGGFXXXXXFFDDFAXXXFXDFDXAXFFDXXFDFDXFGGFXXXXFGGFXGFXXDDGDDXXXXFDGXDFXXXFXFXGGDGFGDDDDXFXXDXFGFDXDDXGXDGDFGXXFDDFXXFDGGGFFDXFFXFFXDDXGAFFGGDXXGFGXGXXXFXXDDAXXGGDXXAXDDFFXDXGFXDXADFGGXXXFDGGFXFXXXDXXXFXFFXXXGXXGXFGFFXGDXDXDDXGGXFGDGXFFDXXXGDGFDFGDDFFFXFFGXFDFFFFXDXDGXXFGGDFAFDFXXDXFFXFDXDDFDXDGAAFXDXXGDFFXFXXDXFDFXAADFGXDXXGXDDDFAFFDXDXDGDGXAGGDXFXGGXXXXDXFFGFGDGDXFXGXXDXXXAXDFXGFDXDFGAFXGGAFFFGFDGFXFDFFXAXDFDDXXFFXGDGAGDXGDXFGXXXDADXDFXFDDXXDADDGXFGGXDFXXFGGXGXFFXGGGAFFDGDDDDDDFXGFDDGFXXXXGGXGDXGDDG"
text = "FnFnGsDnFnXtDnXtGsGqFtGkDqDqAqFqDnGtXnDkXqXqDnAsXsAqXnGkDsDqGkFsXqXnDqXqXkXqFnXsXsFsXtDtGtFqDqFqAnFqDtGnGqDqXqXtFnGqXqFqDkGkGsGtGkXsXqDqDqFnXsDnFqFqGsGnFqGnXnDnDnFsXsXqXqFnXsFsFnFqXnDsXqXsDnXqDsFkXtXqGnXsGqFtXkXqXtXqDqXsDqDsGkDqGkXtFtGsDkXsGsGqFsXtFqGqXqXnXqXkFqDqDqFkDnXsXsFnDtDqDkDqDqXnDtGkGtDsFqXsXnXkFsXsAkAnFtXsGnGkXnGsGqGtDkFsFqXtDsFnFsFtDkDkXnFkFsDqDtDsFtFsAkXsDsXsFsDkGtDqDtFqXkFkDkGkXkFtDqXnGqXtDsXsGkFkDqFnGqDnGsFqXnXnDqGnGnDqXsGqXqDnDqDkDsGqDsXqDsGtXnFqDsXsXtAsXsXtXqFqFsDqDnDnXqDnXsDsDqFtGnXtDsDnFkFqFnXsDqXkXkFsFqXsXnAkXkFkFqGqDsXsXsXkDkDqDtGkGsFtFnGnFqFqGkGsDtFqXqFkFsDsGqDnFkDqGqXsXqGnFqDtXtDqFqFsXtDtFtDkDqDqFqGqDtDnFsDkDqFkFsXsGnGqXqFtDqXqFtGnGqDsAsDtDsDkDtXnDqDtGqGkDnXqDqFnXnFsFtXsXsXnXqDkFnGqFsFsFtDkXkDsXqDnXqXsXkDsXtDsXkDsXkGsXnFtFqFsXkXsXtDqGkDnDnDqDqDqDnDqDnDsXnGtFqDqDqDqGqGkDsDqXkAkFkFkXsFqFnFqGqXtAnGsDnXqDqXqFtFsFtXqAnXnXnXkXqGnDnFtDnXqDtGqXqFsXsFkAkDnXsXkDnGtXsDnXtDqFsFnAsGtDsDnDnXnXqFnAkDsFtDqDqGnFkFtXqFtFnDqDqDtDkXqXqFqDtDtDqXqXsFsFqXsFnGkAnFsDqXqAnGqDqFnDsDkXsXkDkGsFkDqDsFsDqXtXtDsGqFsXnGqDqAnFkXsXsDqFqXtXqXkXkDkFkFqGtGkXsDnDnFqFtFqDqDqFsFqXkAkGsXnXqDqGtXtFsFqDnDsAnXqDnDtDsFsFkFkXnXqGqXqFnDkGkFsDkDsFnXnDsFqFqGnXnFqXnGkGsDtDkDqFsGsDtFkFsGsGtDtXqXqGnDnXkXqXnDkDnXsXqDnXqGnXsXnXqDqDsXsXtXsAsGqDqDqDqXqGnXqFsGnXsFqFqGqDsDtDsDqXqGnDtXsXtAqGqFqGqXkXqDsDtFqGqXkGnXkGnDqGqDqDnDqFsFnFqGkFkXqDqXnFsXtDnXsGqFqXtFsGqDtGnGkDqXsDsGnDqFnGnFkDqFqDtDsDsXqFnDtXtGqXqXqDkDtXkXqFsFsXkGsDsFkXqDqDnDnGkXsGqGkDqFqXnFkAkXsFqFkXsGsDqGkXkXkGnDsFnXsGtDsFqDkDqFnXkXkGqXqDnGsXnFsDqXqXnAkAkGqDqFsXkFqFtDnDqXsDnXqXqDqFsDnXqFqGqFnFkXkDqDqFkDqDqXqXqDqGnXnXnGqGnXsXsDqDnXtFtDnGsDqFsFnDtDsFtXkXkFnDqFsAqFqDqXkXsXsXqAtXqXqXsXtXkXnGqXtDnDtXtDnXsXnXtDqGkAkXnXnXqGnXnFsXqDsDqDnGtGnXqXqDtXkFqXqGnDkFqFtXqXqFsFsGkGnXkGqFtDsGqFtXkGnXqXsFqDqFnXsFqDtXkXnDqXsFtDtFnXqDnGsGsFnXkXnFkXnGkGtGnXsXqXsDqXqFqDnDqXkGsXqAqXtGnGkFnDkAkDtFsFnXsGnDsXkXsFtDqDkDqFnDkGqDqDsFkXtDsXqXqGkGqFkFqFsFnGsAkDkDnDqDqFtXqDsGtXnGsAkXtDnGsFtDkDqXnDtDtGkXtXsXkFqGnFtXtGqGnFtXkDsGqXsXnAnDkAsFqFqFtXtDqDqAsGqXsFnXqXqDkGkXsGqFnXqFqDkDqFsDsAkDqXqDsGsGqDkDtXsXqDnXsAqXsDtXtFqXqGnXsFsDnFnAsFnAsAkDsXsXnXnXqFnGqXqFsFnGnXsAsGnDtGkDtGtXtXnXqDqFsFtDnDqXsDqGqDsDsAkXqDtDnDqDqXqXqXnGqDqDnFsDtFnDtXqAnDsDtXsGtXqDnFsFkXtFsXqXkGsGkDkFsDqDqGsXkGnFqDtFnDtDkXsDnGnDsXsDqGnDqGqXsDsAtFtXqGsDtFtGnGnDsXsGsFsDqGtXnDnXtXqFqAnDtDqDqAsDsDqFqGkAnFkDtXtFkXkFkFtFnGkXsDsFqXnGnFkGnXnDkFqDnXtGtXnXtDsGnXkFsGkXqXnFnXqXqDsGtXkGtXtDtDkGsAnXnFqFqGsAsDsFsXqGqXkFqDnXsDtDqFsDtDsXsXqFqGnXsFsAqDsGsGnXnGkFsFkDqDqXnGkXqDqXsFqXsFqGsXnXsFqFqXqFkXtGkFnFkGtXkXtAqDtFkGqXnXqDnDsDqDsAnXtGtXtXsXkFsFqGnGqXtXqAsGtDsGsXqGsXsXkGnFqGnGnDsGqDsFsGnGsDqDqFsXsFtGsXqDnGsGqXnDqDqFkDqXqXqGqXqGnXqFtFsDnXkXkXnDkDtGkGsXqXsXsXsFqDsDnFqGqDqDsXqXqFqDsXsGtFsXnXqDnFsGqAsDsXqFqXnDkDtXsGtXnXtFtGkXqXkXkGsGnGkDqDqGkGtGkGqDqFqGqGqXnDsXqXsDtFkXqXtGqDnXnXkXkFkFqFnFsDsDsDqDtGqDnAqFnXqGqFsFqFqFnXtGtDqAsGnDtDsXqGqXkDnGqGnDqDqXqDqXkGsXtFqDnFnDsFqFqDnGsDkDtXsDnFqDtDqXtAsXsGqDtFsAkFtFqGnDsFtAsGqXkDsFtGqXtXqGsXkXqXtAsGqXsFsFsDsFsFqXqXsDsFkGsXkDqXtAtFnGqDnDnFsFnXtDqFnFkXtDnGsDnFqGnXnFqXqFsGqGsDkXtGqAkXsDqXsGnFqDqAsDkXtAsDkFsFnGnDqFnGtDkXtFnDnGtFqFsAsGtDqFqGnFkDsXtDsXkGnXnFkFsGtXkDkFnDqFqFkXqGqFsXqFqXkXkXsDkXqDqAsGqDnDsFsGqGsGqGnDqXtXkGqFqFqGtXqXtFsXqXtFsFqDqFqDsXtFkDqGtDsGkDsXsDtFnFkGqDqXsDnDqDtFkXqFtXtXqFqGqGnDtAtXqFqDsFtXkXqFqAtDkGnXqDkGnGqGqFkGqXtGsDnXsDnXsFtXtXkFtXqDsXqDsAsDnXsFqFqDsDqGnDkDkDnXqFqGqGqDnXnXqFtFqXsFsXtDkXsXtXqGqDsXsXsFkAkGnGsXnDkFqXsFnGkGsXnFsDkFqDqGsGsXsDkDtXsFqFtFtFkFqXnAtDqXqFqDsFqGnXkFqGnFsGqDkFsAtXqAtXkXqFqXsFsDsGqGtAsAkFsFqGnGXsXsDnGkFsFtDsXqXqDqFkDkDsXkXqXsXtDtGqFsFnXsXkDqFtXqXqGsFkXnGkGqFnXsFsDsGqXsXsXqXqGnGkFtDkXtFsXkDnDsFkDtXtFtFsDnGqGqAsXqXsDkDsXqDtXtDkFsFkDqDnXtGtDtGqGnGqXqXtXqXsXqXsDqDkDqDnDtFkFtDkGnAqAkXqGsXqFqDnXsXkFqDsGqXqDkDqFqFqXsXnGqXqGtXqDqFqDsXnAqDqDtDnDqDsDnGqXsXnXkFsDsGkGqDnDnDnGkFqXsFtXkDkGsFqGtDtFqXsXnAqGkXqXtGnXnGnFqXsDsDsDnDqDqFsXqFsXqXnXqFqXnGqAtAqGqXqXqXqXqDqFqXsGnFqXnDnDnDsGqGqFqXsXqXqXkXsFkFtDsDqFqAqXnXnXtFsXnDqFnDnXqAsXqFqFsDnXkXkFsDkFqDnXsFqGsGnFkXqXtXkXsFtGnGnFqXqGqFkXqXqDtDsGkDqDtXqXkXnXtFsDkGnXsDqFnXtXqXsFtXsFkXqGkGsDqGqFqGqDnDnDsDqXtFqXsXkDqXkFnGkFsDsXsDkDqXqGkXnDqGqDnFsGtXsXkFtDsDsFqXsXnFsDqGqGnGkFtFkDnXkFtFsXnFqFsXqDqDsXsGtAnFsFtGnGnDsXsXkGqFnGnXtGqXqXkXqFnXkXkDkDsAnXqXkGqGqDtXqXqAtXqDqDnFtFsXnDtXkGkFkXtDtXqAtDqFnGqGsXqXsXsFtDtGkGtFtXtFnXtXqXqDsXqXnXqFqXqFqFkXqXtXqGqXkXtGnXqFqGsFtFqXkGkDnXkDqXtDkDtXqGsGnXqFsGqDkGnXkFkFnDsXqXsXnGsDnGnFqDsFsGqDqDkFsFtFqXsFsFnGsXnFnDqFkFkFtFqXnDqXqDsGtXnXqFqGqGsDnFsAtFnDnFkXqXtDtXkFqFnXtFtDqXqDkDqFqDsXtDqGqAqAsFtXqDkXqXtGkDtFqFnXnFqXqXsDqXsFqDqFqXqAtAqDkFsGqXqDsXkXsGnXkDkDqDsFtAqFqFtDtXsDqXsDqGqDtGnXsAnGnGqDkXnFnXqGnGkXtXqXsXsDqXnFqFtGtFsGtDqGnDsXqFkXsGtXsXtDqXtXqXsAqXnDkFkXsGtFtDkXnDtFqGkAnFkXsGkGqAqFkFqFtGsFsDtGsFkXqFsDnFsFkXqAkXnDqFqDqDkXqXtFsFkXkGsDqGqAsGqDsXsGnDqXsFsGqXnXnXkDkAsDkXkDqFnXqFkDsDtXsXkDqAkDkDqGnXqFqGsGkXqDsFnXtXsFsGnGsXsGkXqFqFkXnGqGqGsAsFkFqDnGqDkDnDkDsDnDsFkXkGqFsDsDqGnFqXnXkXnXkGkGsXqGkDqXtGkDkDsGq"
def get_b5(letter):
	if letter == 'k' or letter == 'A':
		return '0'
	if letter == 'n' or letter == 'D':
		return '1'
	if letter == 'q' or letter == 'F':
		return '2'
	if letter == 's' or letter == 'G':
		return '3' 
	if letter == 't' or letter == 'X':
		return '4'

def getL(trip):
	trip = trip[:2]
	letter = int(trip[0]) * 5
	letter += int(trip[1])
	if letter >= 9:
		letter = letter + 1
	return letter

def convertToLetters(text):
	letter = 0
	plaintext = ""
	while letter + 2 < len(text):
		trip = text[letter:letter+3]
		ap = getL(trip)
		ap = ap + 97
		plaintext = plaintext + chr(ap)
		letter = letter + 3
	print plaintext

b5_string = ""
space = 2
space_count = 0
for letter in text:
	if space == space_count:
		space_count = 0
		b5_string = b5_string + " "
	b5_string = b5_string + get_b5(letter)
	space_count = space_count + 1
convertToLetters(b5_string)
	